/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as NotFoundRouteImport } from './routes/not-found'
import { Route as appRouteRouteImport } from './routes/(app)/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as appSettingsRouteImport } from './routes/(app)/settings'
import { Route as appProfileRouteImport } from './routes/(app)/profile'
import { Route as appPoliciesRouteImport } from './routes/(app)/policies'
import { Route as appDashboardRouteImport } from './routes/(app)/dashboard'
import { Route as appAiChatRouteImport } from './routes/(app)/ai-chat'
import { Route as appContractsIndexRouteImport } from './routes/(app)/contracts.index'
import { Route as appContractsIdRouteImport } from './routes/(app)/contracts.$id'
import { Route as appContractsCreateIndexRouteImport } from './routes/(app)/contracts.create.index'
import { Route as appContractsCreateWriteRouteImport } from './routes/(app)/contracts.create.write'
import { Route as appContractsCreateUploadRouteImport } from './routes/(app)/contracts.create.upload'

const NotFoundRoute = NotFoundRouteImport.update({
  id: '/not-found',
  path: '/not-found',
  getParentRoute: () => rootRouteImport,
} as any)
const appRouteRoute = appRouteRouteImport.update({
  id: '/(app)',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const appSettingsRoute = appSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => appRouteRoute,
} as any)
const appProfileRoute = appProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => appRouteRoute,
} as any)
const appPoliciesRoute = appPoliciesRouteImport.update({
  id: '/policies',
  path: '/policies',
  getParentRoute: () => appRouteRoute,
} as any)
const appDashboardRoute = appDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => appRouteRoute,
} as any)
const appAiChatRoute = appAiChatRouteImport.update({
  id: '/ai-chat',
  path: '/ai-chat',
  getParentRoute: () => appRouteRoute,
} as any)
const appContractsIndexRoute = appContractsIndexRouteImport.update({
  id: '/contracts/',
  path: '/contracts/',
  getParentRoute: () => appRouteRoute,
} as any)
const appContractsIdRoute = appContractsIdRouteImport.update({
  id: '/contracts/$id',
  path: '/contracts/$id',
  getParentRoute: () => appRouteRoute,
} as any)
const appContractsCreateIndexRoute = appContractsCreateIndexRouteImport.update({
  id: '/contracts/create/',
  path: '/contracts/create/',
  getParentRoute: () => appRouteRoute,
} as any)
const appContractsCreateWriteRoute = appContractsCreateWriteRouteImport.update({
  id: '/contracts/create/write',
  path: '/contracts/create/write',
  getParentRoute: () => appRouteRoute,
} as any)
const appContractsCreateUploadRoute =
  appContractsCreateUploadRouteImport.update({
    id: '/contracts/create/upload',
    path: '/contracts/create/upload',
    getParentRoute: () => appRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/not-found': typeof NotFoundRoute
  '/ai-chat': typeof appAiChatRoute
  '/dashboard': typeof appDashboardRoute
  '/policies': typeof appPoliciesRoute
  '/profile': typeof appProfileRoute
  '/settings': typeof appSettingsRoute
  '/contracts/$id': typeof appContractsIdRoute
  '/contracts': typeof appContractsIndexRoute
  '/contracts/create/upload': typeof appContractsCreateUploadRoute
  '/contracts/create/write': typeof appContractsCreateWriteRoute
  '/contracts/create': typeof appContractsCreateIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/not-found': typeof NotFoundRoute
  '/ai-chat': typeof appAiChatRoute
  '/dashboard': typeof appDashboardRoute
  '/policies': typeof appPoliciesRoute
  '/profile': typeof appProfileRoute
  '/settings': typeof appSettingsRoute
  '/contracts/$id': typeof appContractsIdRoute
  '/contracts': typeof appContractsIndexRoute
  '/contracts/create/upload': typeof appContractsCreateUploadRoute
  '/contracts/create/write': typeof appContractsCreateWriteRoute
  '/contracts/create': typeof appContractsCreateIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(app)': typeof appRouteRouteWithChildren
  '/not-found': typeof NotFoundRoute
  '/(app)/ai-chat': typeof appAiChatRoute
  '/(app)/dashboard': typeof appDashboardRoute
  '/(app)/policies': typeof appPoliciesRoute
  '/(app)/profile': typeof appProfileRoute
  '/(app)/settings': typeof appSettingsRoute
  '/(app)/contracts/$id': typeof appContractsIdRoute
  '/(app)/contracts/': typeof appContractsIndexRoute
  '/(app)/contracts/create/upload': typeof appContractsCreateUploadRoute
  '/(app)/contracts/create/write': typeof appContractsCreateWriteRoute
  '/(app)/contracts/create/': typeof appContractsCreateIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/not-found'
    | '/ai-chat'
    | '/dashboard'
    | '/policies'
    | '/profile'
    | '/settings'
    | '/contracts/$id'
    | '/contracts'
    | '/contracts/create/upload'
    | '/contracts/create/write'
    | '/contracts/create'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/not-found'
    | '/ai-chat'
    | '/dashboard'
    | '/policies'
    | '/profile'
    | '/settings'
    | '/contracts/$id'
    | '/contracts'
    | '/contracts/create/upload'
    | '/contracts/create/write'
    | '/contracts/create'
  id:
    | '__root__'
    | '/'
    | '/(app)'
    | '/not-found'
    | '/(app)/ai-chat'
    | '/(app)/dashboard'
    | '/(app)/policies'
    | '/(app)/profile'
    | '/(app)/settings'
    | '/(app)/contracts/$id'
    | '/(app)/contracts/'
    | '/(app)/contracts/create/upload'
    | '/(app)/contracts/create/write'
    | '/(app)/contracts/create/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  appRouteRoute: typeof appRouteRouteWithChildren
  NotFoundRoute: typeof NotFoundRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/not-found': {
      id: '/not-found'
      path: '/not-found'
      fullPath: '/not-found'
      preLoaderRoute: typeof NotFoundRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)': {
      id: '/(app)'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof appRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/settings': {
      id: '/(app)/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof appSettingsRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/profile': {
      id: '/(app)/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof appProfileRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/policies': {
      id: '/(app)/policies'
      path: '/policies'
      fullPath: '/policies'
      preLoaderRoute: typeof appPoliciesRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/dashboard': {
      id: '/(app)/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof appDashboardRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/ai-chat': {
      id: '/(app)/ai-chat'
      path: '/ai-chat'
      fullPath: '/ai-chat'
      preLoaderRoute: typeof appAiChatRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/contracts/': {
      id: '/(app)/contracts/'
      path: '/contracts'
      fullPath: '/contracts'
      preLoaderRoute: typeof appContractsIndexRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/contracts/$id': {
      id: '/(app)/contracts/$id'
      path: '/contracts/$id'
      fullPath: '/contracts/$id'
      preLoaderRoute: typeof appContractsIdRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/contracts/create/': {
      id: '/(app)/contracts/create/'
      path: '/contracts/create'
      fullPath: '/contracts/create'
      preLoaderRoute: typeof appContractsCreateIndexRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/contracts/create/write': {
      id: '/(app)/contracts/create/write'
      path: '/contracts/create/write'
      fullPath: '/contracts/create/write'
      preLoaderRoute: typeof appContractsCreateWriteRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/contracts/create/upload': {
      id: '/(app)/contracts/create/upload'
      path: '/contracts/create/upload'
      fullPath: '/contracts/create/upload'
      preLoaderRoute: typeof appContractsCreateUploadRouteImport
      parentRoute: typeof appRouteRoute
    }
  }
}

interface appRouteRouteChildren {
  appAiChatRoute: typeof appAiChatRoute
  appDashboardRoute: typeof appDashboardRoute
  appPoliciesRoute: typeof appPoliciesRoute
  appProfileRoute: typeof appProfileRoute
  appSettingsRoute: typeof appSettingsRoute
  appContractsIdRoute: typeof appContractsIdRoute
  appContractsIndexRoute: typeof appContractsIndexRoute
  appContractsCreateUploadRoute: typeof appContractsCreateUploadRoute
  appContractsCreateWriteRoute: typeof appContractsCreateWriteRoute
  appContractsCreateIndexRoute: typeof appContractsCreateIndexRoute
}

const appRouteRouteChildren: appRouteRouteChildren = {
  appAiChatRoute: appAiChatRoute,
  appDashboardRoute: appDashboardRoute,
  appPoliciesRoute: appPoliciesRoute,
  appProfileRoute: appProfileRoute,
  appSettingsRoute: appSettingsRoute,
  appContractsIdRoute: appContractsIdRoute,
  appContractsIndexRoute: appContractsIndexRoute,
  appContractsCreateUploadRoute: appContractsCreateUploadRoute,
  appContractsCreateWriteRoute: appContractsCreateWriteRoute,
  appContractsCreateIndexRoute: appContractsCreateIndexRoute,
}

const appRouteRouteWithChildren = appRouteRoute._addFileChildren(
  appRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  appRouteRoute: appRouteRouteWithChildren,
  NotFoundRoute: NotFoundRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
